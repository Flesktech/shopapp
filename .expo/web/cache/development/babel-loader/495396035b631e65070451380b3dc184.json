{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/RadioButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Icon from \"./Icon\";\nimport IconToggle from \"./IconToggle\";\nimport { TYPO, PRIMARY, COLOR, THEME_NAME, PRIMARY_COLORS } from \"./config\";\nvar typos = StyleSheet.create(TYPO);\n\nvar RadioButton = function (_Component) {\n  _inherits(RadioButton, _Component);\n\n  var _super = _createSuper(RadioButton);\n\n  function RadioButton() {\n    _classCallCheck(this, RadioButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RadioButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          primary = _this$props.primary,\n          value = _this$props.value,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          onSelect = _this$props.onSelect;\n      var primaryColor = COLOR[primary + \"500\"].color;\n\n      var status = function () {\n        if (disabled) {\n          return 'disabled';\n        } else if (checked) {\n          return 'checked';\n        } else {\n          return 'default';\n        }\n      }();\n\n      var colorMap = {\n        light: {\n          disabled: '#000',\n          checked: primaryColor,\n          default: '#000'\n        },\n        dark: {\n          disabled: '#fff',\n          checked: primaryColor,\n          default: '#fff'\n        }\n      };\n      var opacityMap = {\n        light: {\n          checked: 1,\n          default: 0.54,\n          disabled: 0.26\n        },\n        dark: {\n          checked: 1,\n          default: 0.7,\n          disabled: 0.3\n        }\n      };\n      var underlayMap = {\n        light: 'rgba(0,0,0,.12)',\n        dark: 'rgba(255,255,255,.12)'\n      };\n      var labelColorMap = {\n        light: '#000',\n        dark: '#fff'\n      };\n      var CURR_COLOR = colorMap[theme][status];\n      var OPACITY = opacityMap[theme][status];\n      var LABEL_COLOR = labelColorMap[theme];\n      var UNDERLAY_COLOR = underlayMap[theme];\n      return React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          disabled && !checked ? null : onSelect(value);\n        },\n        underlayColor: disabled ? 'rgba(0,0,0,0)' : UNDERLAY_COLOR,\n        activeOpacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, React.createElement(IconToggle, {\n        disabled: disabled,\n        color: CURR_COLOR,\n        onPress: function onPress() {\n          disabled && !checked ? null : onSelect(value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: checked ? 'radio-button-checked' : 'radio-button-unchecked',\n        size: 24,\n        color: CURR_COLOR,\n        style: {\n          opacity: OPACITY,\n          margin: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      })), React.createElement(View, {\n        style: styles.labelContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: [typos.paperFontBody1, styles.label, COLOR[theme + \"PrimaryOpacity\"], disabled && COLOR[theme + \"DisabledOpacity\"], {\n          color: LABEL_COLOR\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }\n      }, this.props.label))));\n    }\n  }]);\n\n  return RadioButton;\n}(Component);\n\nRadioButton.propTypes = {\n  label: PropTypes.string,\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onSelect: PropTypes.func\n};\nRadioButton.defaultProps = {\n  theme: 'light',\n  primary: PRIMARY,\n  disabled: false\n};\nexport { RadioButton as default };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0)'\n  },\n  labelContainer: {\n    flex: 1\n  },\n  label: {\n    marginLeft: 16,\n    opacity: COLOR.darkPrimaryOpacity.opacity\n  }\n});","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/RadioButton.js"],"names":["React","Component","PropTypes","Icon","IconToggle","TYPO","PRIMARY","COLOR","THEME_NAME","PRIMARY_COLORS","typos","StyleSheet","create","RadioButton","props","theme","primary","value","checked","disabled","onSelect","primaryColor","color","status","colorMap","light","default","dark","opacityMap","underlayMap","labelColorMap","CURR_COLOR","OPACITY","LABEL_COLOR","UNDERLAY_COLOR","styles","container","opacity","margin","labelContainer","paperFontBody1","label","propTypes","string","oneOf","oneOfType","number","isRequired","bool","func","defaultProps","flexDirection","alignItems","backgroundColor","flex","marginLeft","darkPrimaryOpacity"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {StyleSheet, Text, View, TouchableHighlight} from \"react-native\";\nimport Icon from './Icon';\nimport IconToggle from './IconToggle';\nimport { TYPO, PRIMARY, COLOR, THEME_NAME, PRIMARY_COLORS } from './config';\n\nconst typos = StyleSheet.create(TYPO);\n\nexport default class RadioButton extends Component {\n\n    static propTypes = {\n        label: PropTypes.string,\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        checked: PropTypes.bool,\n        disabled: PropTypes.bool,\n        onSelect: PropTypes.func\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: PRIMARY,\n        disabled: false\n    };\n\n    render() {\n        const { theme, primary, value, checked, disabled, onSelect } = this.props;\n        const primaryColor = COLOR[`${primary}500`].color;\n\n        let status = (()=> {\n            if (disabled) {\n                return 'disabled'\n            } else if (checked) {\n                return 'checked'\n            } else {\n                return 'default'\n            }\n        })();\n\n        const colorMap = {\n            light: {\n                disabled: '#000',\n                checked: primaryColor,\n                default: '#000'\n            },\n            dark: {\n                disabled: '#fff',\n                checked: primaryColor,\n                default: '#fff'\n            }\n        };\n\n        const opacityMap = {\n            light: {\n                checked: 1,\n                default: 0.54,\n                disabled: 0.26\n            },\n            dark: {\n                checked: 1,\n                default: 0.7,\n                disabled: 0.3\n            }\n        };\n\n        const underlayMap = {\n            light: 'rgba(0,0,0,.12)',\n            dark: 'rgba(255,255,255,.12)'\n        }\n\n        const labelColorMap = {\n            light: '#000',\n            dark: '#fff'\n        };\n\n        const CURR_COLOR = colorMap[theme][status];\n        const OPACITY = opacityMap[theme][status];\n        const LABEL_COLOR = labelColorMap[theme];\n        const UNDERLAY_COLOR = underlayMap[theme];\n\n        return (\n            <TouchableHighlight\n                onPress={() => { disabled && !checked ? null : onSelect(value) }}\n                underlayColor={disabled ? 'rgba(0,0,0,0)' : UNDERLAY_COLOR}\n                activeOpacity={1}\n            >\n                <View style={styles.container}>\n                    <IconToggle\n                        disabled={disabled}\n                        color={CURR_COLOR}\n                        onPress={() => { disabled && !checked ? null : onSelect(value) }}\n                    >\n                        <Icon name={checked ? 'radio-button-checked' : 'radio-button-unchecked'}\n                              size={24}\n                              color={CURR_COLOR}\n                              style={{\n                                  opacity: OPACITY,\n                                  margin: 16\n                              }}\n                        />\n                    </IconToggle>\n                    <View style={styles.labelContainer}>\n                        <Text\n                            style={[\n                                typos.paperFontBody1,\n                                styles.label,\n                                COLOR[`${theme}PrimaryOpacity`],\n                                disabled && COLOR[`${theme}DisabledOpacity`], {\n                                    color: LABEL_COLOR\n                                }\n                            ]}\n                        >\n                            {this.props.label}\n                        </Text>\n                    </View>\n                </View>\n            </TouchableHighlight>\n        );\n    };\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0,0,0,0)'\n    },\n\tlabelContainer: {\n    \tflex: 1\n\t},\n    label: {\n        marginLeft: 16,\n        opacity: COLOR.darkPrimaryOpacity.opacity\n    }\n});\n"]},"metadata":{},"sourceType":"module"}