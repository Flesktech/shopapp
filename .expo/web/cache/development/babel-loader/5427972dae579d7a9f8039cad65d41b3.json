{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Card/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Ripple from \"../polyfill/Ripple\";\nimport { getColor, isCompatible } from \"../helpers\";\nimport Media from \"./Media\";\nimport Body from \"./Body\";\nimport Actions from \"./Actions\";\nimport { COLOR } from \"../config\";\n\nvar Card = function (_Component) {\n  _inherits(Card, _Component);\n\n  var _super = _createSuper(Card);\n\n  function Card() {\n    _classCallCheck(this, Card);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          overrides = _this$props.overrides,\n          elevation = _this$props.elevation,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          children = _this$props.children,\n          style = _this$props.style;\n\n      var cardStyle = function () {\n        return [styles.container, {\n          elevation: elevation\n        }, !isCompatible('elevation') && {\n          borderWidth: 1,\n          borderColor: 'rgba(0,0,0,.12)'\n        }, theme && {\n          backgroundColor: COLOR[theme].color\n        }, overrides && overrides.backgroundColor && {\n          backgroundColor: overrides.backgroundColor\n        }, style];\n      }();\n\n      if (onPress == null || disabled) {\n        return React.createElement(View, {\n          style: cardStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }\n        }, children);\n      }\n\n      var defaultRippleColor = 'rgba(153,153,153,.4)';\n\n      var rippleColor = function () {\n        if (disabled || !(overrides && overrides.rippleColor)) {\n          return defaultRippleColor;\n        }\n\n        return getColor(overrides.rippleColor);\n      }();\n\n      if (!isCompatible('TouchableNativeFeedback')) {\n        return React.createElement(Ripple, {\n          rippleColor: rippleColor,\n          onPress: onPress,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: cardStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        }, children));\n      }\n\n      return React.createElement(TouchableNativeFeedback, {\n        background: TouchableNativeFeedback.Ripple(rippleColor),\n        onPress: onPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: cardStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }, children));\n    }\n  }]);\n\n  return Card;\n}(Component);\n\nCard.propTypes = {\n  theme: PropTypes.string,\n  overrides: PropTypes.shape({\n    backgroundColor: PropTypes.string,\n    rippleColor: PropTypes.string\n  }),\n  elevation: PropTypes.number,\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  style: View.propTypes.style\n};\nCard.defaultProps = {\n  elevation: 2,\n  disabled: false\n};\nCard.Media = Media;\nCard.Body = Body;\nCard.Actions = Actions;\nexport { Card as default };\nvar styles = {\n  container: {\n    backgroundColor: '#ffffff',\n    borderRadius: 2,\n    margin: 8,\n    paddingLeft: 16,\n    paddingRight: 16\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Card/index.js"],"names":["React","Component","PropTypes","Ripple","getColor","isCompatible","Media","Body","Actions","COLOR","Card","props","theme","overrides","elevation","disabled","onPress","children","style","cardStyle","styles","container","borderWidth","borderColor","backgroundColor","color","defaultRippleColor","rippleColor","TouchableNativeFeedback","propTypes","string","shape","number","bool","func","node","isRequired","View","defaultProps","borderRadius","margin","paddingLeft","paddingRight"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View, TouchableNativeFeedback} from \"react-native\";\nimport Ripple from '../polyfill/Ripple';\nimport { getColor, isCompatible } from '../helpers';\n\nimport Media from './Media';\nimport Body from './Body';\nimport Actions from './Actions';\n\nimport { COLOR } from '../config';\n\nexport default class Card extends Component {\n\n    static propTypes = {\n        theme: PropTypes.string,\n        overrides: PropTypes.shape({\n            backgroundColor: PropTypes.string,\n            rippleColor: PropTypes.string\n        }),\n        elevation: PropTypes.number,\n        disabled: PropTypes.bool,\n        onPress: PropTypes.func,\n        children: PropTypes.node.isRequired,\n        style: View.propTypes.style\n    };\n\n    static defaultProps = {\n        elevation: 2,\n        disabled: false\n    };\n\n    static Media = Media;\n\n    static Body = Body;\n\n    static Actions = Actions;\n\n    render() {\n        const { theme, overrides, elevation, disabled, onPress, children, style } = this.props;\n\n        const cardStyle = (() => {\n            return [\n                styles.container, {\n                    elevation\n                }, !isCompatible('elevation') && {\n                    borderWidth: 1,\n                    borderColor: 'rgba(0,0,0,.12)'\n                }, theme && {\n                    backgroundColor: COLOR[theme].color\n                }, overrides && overrides.backgroundColor && {\n                    backgroundColor: overrides.backgroundColor\n                }, style\n            ];\n        })();\n\n\n        if (onPress == null || disabled) {\n            return (\n                <View style={cardStyle}>\n                    {children}\n                </View>\n            );\n        }\n\n        const defaultRippleColor = 'rgba(153,153,153,.4)';\n        const rippleColor = (() => {\n            if (disabled || !(overrides && overrides.rippleColor)) {\n                return defaultRippleColor;\n            }\n\n            return getColor(overrides.rippleColor)\n        })();\n\n        if (!isCompatible('TouchableNativeFeedback')) {\n            return (\n                <Ripple\n                    rippleColor={rippleColor}\n                    onPress={onPress}\n                >\n                    <View style={cardStyle}>\n                        {children}\n                    </View>\n                </Ripple>\n            )\n        }\n\n        return (\n            <TouchableNativeFeedback\n                background={TouchableNativeFeedback.Ripple(rippleColor)}\n                onPress={onPress}\n            >\n                <View style={cardStyle}>\n                    {children}\n                </View>\n            </TouchableNativeFeedback>\n        );\n\n    }\n\n}\n\nconst styles = {\n    container: {\n        backgroundColor: '#ffffff',\n        borderRadius: 2,\n        margin: 8,\n        paddingLeft: 16,\n        paddingRight: 16\n    }\n};\n"]},"metadata":{},"sourceType":"module"}