{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Drawer/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { THEME_NAME, PRIMARY_COLORS } from \"../config\";\nimport { getColor } from \"../helpers\";\nimport Header from \"./Header\";\nimport Section from \"./Section\";\n\nvar Drawer = function (_Component) {\n  _inherits(Drawer, _Component);\n\n  var _super = _createSuper(Drawer);\n\n  function Drawer() {\n    _classCallCheck(this, Drawer);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Drawer, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          overrides = _this$props.overrides,\n          children = _this$props.children;\n      var backgroundColorMap = {\n        light: '#ffffff',\n        dark: '#333333'\n      };\n\n      var backgroundColor = function () {\n        if (overrides && overrides.backgroundColor) {\n          return getColor(overrides.backgroundColor);\n        }\n\n        return backgroundColorMap[theme];\n      }();\n\n      return React.createElement(ScrollView, {\n        style: [styles.container, {\n          backgroundColor: backgroundColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, React.Children.map(children, function (child) {\n        return React.cloneElement(child, {\n          theme: theme\n        });\n      }));\n    }\n  }]);\n\n  return Drawer;\n}(Component);\n\nDrawer.propTypes = {\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  overrides: PropTypes.shape({\n    backgroundColor: PropTypes.string\n  }),\n  children: PropTypes.node.isRequired\n};\nDrawer.defaultProps = {\n  theme: 'light',\n  primary: 'paperGrey'\n};\nDrawer.Header = Header;\nDrawer.Section = Section;\nexport { Drawer as default };\nvar styles = {\n  container: {\n    flex: 1\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Drawer/index.js"],"names":["React","Component","PropTypes","THEME_NAME","PRIMARY_COLORS","getColor","Header","Section","Drawer","props","theme","overrides","children","backgroundColorMap","light","dark","backgroundColor","styles","container","Children","map","child","cloneElement","propTypes","oneOf","primary","shape","string","node","isRequired","defaultProps","flex"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,QAA0C,OAA1C;;AAEA,SAASC,UAAT,EAAqBC,cAArB;AACA,SAASC,QAAT;AAEA,OAAOC,MAAP;AACA,OAAOC,OAAP;;IAEqBC,M;;;;;;;;;;;;;6BAoBR;AAAA,wBACkC,KAAKC,KADvC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,SADV,eACUA,SADV;AAAA,UACqBC,QADrB,eACqBA,QADrB;AAGL,UAAMC,kBAAkB,GAAG;AACvBC,QAAAA,KAAK,EAAE,SADgB;AAEvBC,QAAAA,IAAI,EAAE;AAFiB,OAA3B;;AAKA,UAAMC,eAAe,GAAI,YAAM;AAC3B,YAAIL,SAAS,IAAIA,SAAS,CAACK,eAA3B,EAA4C;AACxC,iBAAOX,QAAQ,CAACM,SAAS,CAACK,eAAX,CAAf;AACH;;AACD,eAAOH,kBAAkB,CAACH,KAAD,CAAzB;AACH,OALuB,EAAxB;;AAOA,aACI,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAE,CAACO,MAAM,CAACC,SAAR,EAAmB;AAAEF,UAAAA,eAAe,EAAEA;AAAnB,SAAnB,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKhB,KAAK,CAACmB,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,EAA6B,UAACS,KAAD,EAAW;AACrC,eAAOrB,KAAK,CAACsB,YAAN,CAAmBD,KAAnB,EAA0B;AAC7BX,UAAAA,KAAK,EAALA;AAD6B,SAA1B,CAAP;AAGH,OAJA,CADL,CADJ;AASH;;;;EA5C+BT,S;;AAAfO,M,CAEVe,S,GAAY;AACfb,EAAAA,KAAK,EAAER,SAAS,CAACsB,KAAV,CAAgBrB,UAAhB,CADQ;AAEfsB,EAAAA,OAAO,EAAEvB,SAAS,CAACsB,KAAV,CAAgBpB,cAAhB,CAFM;AAGfO,EAAAA,SAAS,EAAET,SAAS,CAACwB,KAAV,CAAgB;AACvBV,IAAAA,eAAe,EAAEd,SAAS,CAACyB;AADJ,GAAhB,CAHI;AAMff,EAAAA,QAAQ,EAAEV,SAAS,CAAC0B,IAAV,CAAeC;AANV,C;AAFFrB,M,CAWVsB,Y,GAAe;AAClBpB,EAAAA,KAAK,EAAE,OADW;AAElBe,EAAAA,OAAO,EAAE;AAFS,C;AAXLjB,M,CAgBVF,M,GAASA,M;AAhBCE,M,CAkBVD,O,GAAUA,O;SAlBAC,M;AAgDrB,IAAMS,MAAM,GAAG;AACXC,EAAAA,SAAS,EAAE;AACPa,IAAAA,IAAI,EAAE;AADC;AADA,CAAf","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {ScrollView} from \"react-native\";\nimport { THEME_NAME, PRIMARY_COLORS } from '../config';\nimport { getColor } from '../helpers';\n\nimport Header from './Header';\nimport Section from './Section';\n\nexport default class Drawer extends Component {\n\n    static propTypes = {\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        overrides: PropTypes.shape({\n            backgroundColor: PropTypes.string\n        }),\n        children: PropTypes.node.isRequired\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: 'paperGrey'\n    };\n\n    static Header = Header;\n\n    static Section = Section;\n\n    render() {\n        const { theme, overrides, children } = this.props;\n\n        const backgroundColorMap = {\n            light: '#ffffff',\n            dark: '#333333'\n        };\n\n        const backgroundColor = (() => {\n            if (overrides && overrides.backgroundColor) {\n                return getColor(overrides.backgroundColor);\n            }\n            return backgroundColorMap[theme];\n        })();\n\n        return (\n            <ScrollView style={[styles.container, { backgroundColor: backgroundColor }]}>\n                {React.Children.map(children, (child) => {\n                    return React.cloneElement(child, {\n                        theme\n                    });\n                })}\n            </ScrollView>\n        );\n    }\n\n}\n\nconst styles = {\n    container: {\n        flex: 1\n    }\n};"]},"metadata":{},"sourceType":"module"}