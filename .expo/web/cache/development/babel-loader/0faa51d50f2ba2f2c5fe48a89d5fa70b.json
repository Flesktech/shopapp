{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { PRIMARY, COLOR } from \"./config\";\nexport function getColor(string) {\n  if (string) {\n    if (string.indexOf('#') > -1 || string.indexOf('rgba') > -1) {\n      return string;\n    }\n\n    if (COLOR[string]) {\n      return COLOR[string].color;\n    }\n\n    if (COLOR[string + \"500\"]) {\n      return COLOR[string + \"500\"].color;\n    }\n  }\n\n  return COLOR[PRIMARY + \"500\"].color;\n}\nexport function isCompatible(feature) {\n  var version = Platform.Version;\n\n  switch (feature) {\n    case 'TouchableNativeFeedback':\n      return version >= 21;\n      break;\n\n    case 'elevation':\n      return version >= 21;\n      break;\n\n    default:\n      return true;\n      break;\n  }\n}","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/helpers.js"],"names":["PRIMARY","COLOR","getColor","string","indexOf","color","isCompatible","feature","version","Platform","Version"],"mappings":";AACA,SAASA,OAAT,EAAkBC,KAAlB;AAOA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AAC7B,MAAIA,MAAJ,EAAY;AACR,QAAIA,MAAM,CAACC,OAAP,CAAe,GAAf,IAAsB,CAAC,CAAvB,IAA4BD,MAAM,CAACC,OAAP,CAAe,MAAf,IAAyB,CAAC,CAA1D,EAA6D;AACzD,aAAOD,MAAP;AACH;;AAED,QAAIF,KAAK,CAACE,MAAD,CAAT,EAAmB;AACf,aAAOF,KAAK,CAACE,MAAD,CAAL,CAAcE,KAArB;AACH;;AAED,QAAIJ,KAAK,CAAIE,MAAJ,SAAT,EAA2B;AACvB,aAAOF,KAAK,CAAIE,MAAJ,SAAL,CAAsBE,KAA7B;AACH;AACJ;;AAED,SAAOJ,KAAK,CAAID,OAAJ,SAAL,CAAuBK,KAA9B;AACH;AAOD,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAClC,MAAMC,OAAO,GAAGC,QAAQ,CAACC,OAAzB;;AAEA,UAAQH,OAAR;AACI,SAAK,yBAAL;AACI,aAAOC,OAAO,IAAI,EAAlB;AACA;;AACJ,SAAK,WAAL;AACI,aAAOA,OAAO,IAAI,EAAlB;AACA;;AACJ;AACI,aAAO,IAAP;AACA;AATR;AAWH","sourcesContent":["import { Platform } from 'react-native';\nimport { PRIMARY, COLOR } from './config';\n\n/**\n * Detect whether a color is a hex code/rgba or a paper element style\n * @param string\n * @returns {*}\n */\nexport function getColor(string) {\n    if (string) {\n        if (string.indexOf('#') > -1 || string.indexOf('rgba') > -1) {\n            return string;\n        }\n\n        if (COLOR[string]) {\n            return COLOR[string].color;\n        }\n\n        if (COLOR[`${string}500`]) {\n            return COLOR[`${string}500`].color;\n        }\n    }\n\n    return COLOR[`${PRIMARY}500`].color;\n}\n\n/**\n * Detect whether a specific feature is compatible with the device\n * @param feature\n * @returns bool\n */\nexport function isCompatible(feature) {\n    const version = Platform.Version;\n\n    switch (feature) {\n        case 'TouchableNativeFeedback':\n            return version >= 21;\n            break;\n        case 'elevation':\n            return version >= 21;\n            break;\n        default:\n            return true;\n            break;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}