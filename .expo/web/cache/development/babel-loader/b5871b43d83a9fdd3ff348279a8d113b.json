{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Ripple.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport { default as PolyfillRipple } from \"./polyfill/Ripple\";\nimport { isCompatible } from \"./helpers\";\n\nvar Ripple = function (_Component) {\n  _inherits(Ripple, _Component);\n\n  var _super = _createSuper(Ripple);\n\n  function Ripple() {\n    _classCallCheck(this, Ripple);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Ripple, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          children = _this$props.children,\n          other = _objectWithoutProperties(_this$props, [\"color\", \"onPress\", \"onLongPress\", \"children\"]);\n\n      if (!isCompatible('TouchableNativeFeedback')) {\n        return React.createElement(PolyfillRipple, _extends({\n          rippleColor: color,\n          onPress: onPress,\n          onLongPress: onLongPress\n        }, other, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 17\n          }\n        }), React.createElement(View, {\n          style: {\n            marginHorizontal: .2\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }\n        }, children));\n      }\n\n      return React.createElement(TouchableNativeFeedback, {\n        background: TouchableNativeFeedback.Ripple(color),\n        onPress: onPress,\n        onLongPress: onLongPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, React.createElement(View, _extends({}, other, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }\n      }), children));\n    }\n  }]);\n\n  return Ripple;\n}(Component);\n\nRipple.propTypes = {\n  color: PropTypes.string,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  children: PropTypes.node.isRequired\n};\nRipple.defaultProps = {\n  color: 'rgba(0,0,0,.2)'\n};\nexport { Ripple as default };","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Ripple.js"],"names":["React","Component","PropTypes","default","PolyfillRipple","isCompatible","Ripple","props","color","onPress","onLongPress","children","other","marginHorizontal","TouchableNativeFeedback","propTypes","string","func","node","isRequired","defaultProps"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,QAA0C,OAA1C;;;;AAEA,SAASC,OAAO,IAAIC,cAApB;AACA,SAASC,YAAT;;IAEqBC,M;;;;;;;;;;;;;6BAaR;AAAA,wBACuD,KAAKC,KAD5D;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,OADV,eACUA,OADV;AAAA,UACmBC,WADnB,eACmBA,WADnB;AAAA,UACgCC,QADhC,eACgCA,QADhC;AAAA,UAC6CC,KAD7C;;AAGL,UAAI,CAACP,YAAY,CAAC,yBAAD,CAAjB,EAA8C;AAC1C,eACI,oBAAC,cAAD;AACI,UAAA,WAAW,EAAEG,KADjB;AAEI,UAAA,OAAO,EAAEC,OAFb;AAGI,UAAA,WAAW,EAAEC;AAHjB,WAIQE,KAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAOI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEC,YAAAA,gBAAgB,EAAE;AAApB,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,QADL,CAPJ,CADJ;AAaH;;AAED,aACI,oBAAC,uBAAD;AACI,QAAA,UAAU,EAAEG,uBAAuB,CAACR,MAAxB,CAA+BE,KAA/B,CADhB;AAEI,QAAA,OAAO,EAAEC,OAFb;AAGI,QAAA,WAAW,EAAEC,WAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,IAAD,eAAUE,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACKD,QADL,CALJ,CADJ;AAWH;;;;EA3C+BV,S;;AAAfK,M,CAEVS,S,GAAY;AACfP,EAAAA,KAAK,EAAEN,SAAS,CAACc,MADF;AAEfP,EAAAA,OAAO,EAAEP,SAAS,CAACe,IAFJ;AAGfP,EAAAA,WAAW,EAAER,SAAS,CAACe,IAHR;AAIfN,EAAAA,QAAQ,EAAET,SAAS,CAACgB,IAAV,CAAeC;AAJV,C;AAFFb,M,CASVc,Y,GAAe;AAClBZ,EAAAA,KAAK,EAAE;AADW,C;SATLF,M","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View, Text, TouchableNativeFeedback} from \"react-native\";\nimport { default as PolyfillRipple } from './polyfill/Ripple';\nimport { isCompatible } from './helpers';\n\nexport default class Ripple extends Component {\n\n    static propTypes = {\n        color: PropTypes.string,\n        onPress: PropTypes.func,\n        onLongPress: PropTypes.func,\n        children: PropTypes.node.isRequired\n    };\n\n    static defaultProps = {\n        color: 'rgba(0,0,0,.2)'\n    };\n\n    render() {\n        const { color, onPress, onLongPress, children, ...other } = this.props;\n\n        if (!isCompatible('TouchableNativeFeedback')) {\n            return (\n                <PolyfillRipple\n                    rippleColor={color}\n                    onPress={onPress}\n                    onLongPress={onLongPress}\n                    {...other}\n                >\n                    {/* Stops fatal crash with out of bounds animation */}\n                    <View style={{ marginHorizontal: .2 }}>\n                        {children}\n                    </View>\n                </PolyfillRipple>\n            )\n        }\n\n        return (\n            <TouchableNativeFeedback\n                background={TouchableNativeFeedback.Ripple(color)}\n                onPress={onPress}\n                onLongPress={onLongPress}\n            >\n                <View {...other}>\n                    {children}\n                </View>\n            </TouchableNativeFeedback>\n        );\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}