{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Avatar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Icon from \"./Icon\";\nimport { getColor } from \"./helpers\";\n\nvar Avatar = function (_Component) {\n  _inherits(Avatar, _Component);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar() {\n    _classCallCheck(this, Avatar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          image = _this$props.image,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          color = _this$props.color,\n          backgroundColor = _this$props.backgroundColor,\n          text = _this$props.text,\n          borderRadius = _this$props.borderRadius,\n          borderColor = _this$props.borderColor,\n          borderWidth = _this$props.borderWidth;\n\n      if (image) {\n        return React.cloneElement(image, {\n          style: {\n            width: size,\n            height: size,\n            borderRadius: borderRadius,\n            borderColor: borderColor,\n            borderWidth: borderWidth\n          }\n        });\n      }\n\n      if (icon) {\n        return React.createElement(View, {\n          style: {\n            flex: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: {\n            width: size,\n            height: size,\n            borderRadius: borderRadius,\n            backgroundColor: getColor(backgroundColor),\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }\n        }, React.createElement(Icon, {\n          name: icon,\n          color: getColor(color),\n          size: 0.6 * size,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }\n        })));\n      }\n\n      if (text) {\n        return React.createElement(View, {\n          style: {\n            flex: 1\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: {\n            width: size,\n            height: size,\n            borderRadius: borderRadius,\n            backgroundColor: getColor(backgroundColor),\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }\n        }, React.createElement(Text, {\n          style: {\n            color: getColor(color)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }\n        }, text)));\n      }\n\n      return null;\n    }\n  }]);\n\n  return Avatar;\n}(Component);\n\nAvatar.propTypes = {\n  image: PropTypes.shape({\n    type: PropTypes.oneOf([Image])\n  }),\n  icon: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  text: PropTypes.string,\n  borderRadius: PropTypes.number,\n  borderColor: PropTypes.string,\n  borderWidth: PropTypes.number\n};\nAvatar.defaultProps = {\n  size: 40,\n  color: '#ffffff',\n  backgroundColor: getColor('paperGrey500'),\n  borderRadius: 40 / 2,\n  borderColor: 'rgba(0,0,0,.1)',\n  borderWidth: 1\n};\nexport { Avatar as default };","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Avatar.js"],"names":["React","Component","PropTypes","Icon","getColor","Avatar","props","image","icon","size","color","backgroundColor","text","borderRadius","borderColor","borderWidth","cloneElement","style","width","height","flex","alignItems","justifyContent","propTypes","shape","type","oneOf","Image","string","number","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View, Image, Text} from \"react-native\";\nimport Icon from './Icon';\nimport { getColor } from './helpers';\n\nexport default class Avatar extends Component {\n\n    static propTypes = {\n        image: PropTypes.shape({ type: PropTypes.oneOf([Image]) }),\n        icon: PropTypes.string,\n        size: PropTypes.number,\n        color: PropTypes.string,\n        backgroundColor: PropTypes.string,\n        text: PropTypes.string,\n        borderRadius: PropTypes.number,\n        borderColor: PropTypes.string,\n        borderWidth: PropTypes.number\n    };\n\n    static defaultProps = {\n        size: 40,\n        color: '#ffffff',\n        backgroundColor: getColor('paperGrey500'),\n        borderRadius: 40 / 2,\n        borderColor: 'rgba(0,0,0,.1)',\n        borderWidth: 1\n    };\n\n    render() {\n        const {\n            image,\n            icon,\n            size,\n            color,\n            backgroundColor,\n            text,\n            borderRadius,\n            borderColor,\n            borderWidth\n        } = this.props;\n\n        if (image) {\n            return React.cloneElement(image, {\n                style: {\n                    width: size,\n                    height: size,\n                    borderRadius: borderRadius,\n                    borderColor: borderColor,\n                    borderWidth: borderWidth\n                }\n            });\n        }\n\n        if (icon) {\n            return (\n                <View style={{ flex: 1 }}>\n                    <View style={{ width: size, height: size, borderRadius: borderRadius, backgroundColor: getColor(backgroundColor), alignItems:'center', justifyContent: 'center' }}>\n                        <Icon\n                            name={icon}\n                            color={getColor(color)}\n                            size={0.6 * size}\n                        />\n                    </View>\n                </View>\n            );\n        }\n\n        if (text) {\n            return (\n                <View style={{ flex: 1 }}>\n                    <View style={{ width: size, height: size, borderRadius: borderRadius, backgroundColor: getColor(backgroundColor), alignItems:'center', justifyContent: 'center' }}>\n                        <Text style={{ color: getColor(color) }}>{text}</Text>\n                    </View>\n                </View>\n            );\n        }\n\n        return null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}