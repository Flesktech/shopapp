{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Ripple from \"./polyfill/Ripple\";\nimport { TYPO, PRIMARY, THEME_NAME, PRIMARY_COLORS } from \"./config\";\nimport { getColor, isCompatible } from \"./helpers\";\n\nvar Button = function (_Component) {\n  _inherits(Button, _Component);\n\n  var _super = _createSuper(Button);\n\n  function Button(props) {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    _this = _super.call(this, props);\n\n    _this.setElevation = function () {\n      _this.setState({\n        elevation: 4\n      });\n    };\n\n    _this.removeElevation = function () {\n      _this.setState({\n        elevation: 2\n      });\n    };\n\n    _this.state = {\n      elevation: 2\n    };\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var elevation = this.state.elevation;\n      var _this$props = this.props,\n          text = _this$props.text,\n          value = _this$props.value,\n          theme = _this$props.theme,\n          primary = _this$props.primary,\n          overrides = _this$props.overrides,\n          disabled = _this$props.disabled,\n          raised = _this$props.raised,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress;\n      var textStyleMap = {\n        flat: {\n          light: {\n            normal: {\n              color: getColor(primary)\n            },\n            disabled: {\n              color: 'rgba(0,0,0,.26)'\n            }\n          },\n          dark: {\n            normal: {\n              color: getColor(primary)\n            },\n            disabled: {\n              color: 'rgba(255,255,255,.3)'\n            }\n          }\n        },\n        raised: {\n          light: {\n            normal: {\n              color: getColor(primary)\n            },\n            disabled: {\n              color: 'rgba(0,0,0,.26)'\n            }\n          },\n          dark: {\n            normal: {\n              color: '#fff'\n            },\n            disabled: {\n              color: 'rgba(255,255,255,.3)'\n            }\n          }\n        }\n      };\n      var buttonStyleMap = {\n        raised: {\n          light: {\n            normal: {\n              backgroundColor: '#fff',\n              borderColor: 'rgba(0,0,0,.12)'\n            },\n            disabled: {\n              backgroundColor: 'rgba(0,0,0,.12)',\n              borderWidth: 1,\n              borderColor: 'rgba(0,0,0,.12)'\n            }\n          },\n          dark: {\n            normal: {\n              backgroundColor: getColor(primary),\n              borderWidth: 1,\n              borderColor: 'rgba(0,0,0,.12)'\n            },\n            disabled: {\n              backgroundColor: 'rgba(255,255,255,.12)',\n              borderWidth: 1,\n              borderColor: 'rgba(0,0,0,.12)'\n            }\n          }\n        }\n      };\n      var rippleColorMap = {\n        flat: {\n          light: {\n            normal: 'rgba(153,153,153,.4)',\n            disabled: 'rgba(0,0,0,0.06)'\n          },\n          dark: {\n            normal: 'rgba(204,204,204,.25)',\n            disabled: 'rgba(255,255,255,0.06)'\n          }\n        },\n        raised: {\n          light: {\n            normal: 'rgba(153,153,153,.4)',\n            disabled: 'rgba(0,0,0,.06)'\n          },\n          dark: {\n            normal: getColor(primary + \"700\"),\n            disabled: 'rgba(255,255,255,.06)'\n          }\n        }\n      };\n      var type = disabled ? 'disabled' : 'normal';\n      var shape = raised ? 'raised' : 'flat';\n\n      var textStyle = function () {\n        if (disabled || !(overrides && overrides.textColor)) {\n          return textStyleMap[shape][theme][type];\n        }\n\n        return {\n          color: getColor(overrides.textColor)\n        };\n      }();\n\n      var buttonStyle = function () {\n        if (raised) {\n          if (disabled || !(overrides && overrides.backgroundColor)) {\n            return buttonStyleMap[shape][theme][type];\n          }\n\n          return _extends(buttonStyleMap[shape][theme][type], {\n            backgroundColor: getColor(overrides.backgroundColor)\n          });\n        }\n\n        return null;\n      }();\n\n      var rippleColor = function () {\n        if (disabled || !(overrides && overrides.rippleColor)) {\n          return rippleColorMap[shape][theme][type];\n        }\n\n        return getColor(overrides.rippleColor);\n      }();\n\n      if (disabled) {\n        return React.createElement(View, {\n          style: [styles.button, buttonStyle, {\n            backgroundColor: buttonStyle && buttonStyle.backgroundColor\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: [TYPO.paperFontButton, textStyle, styles.text],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 21\n          }\n        }, text || value));\n      }\n\n      if (!isCompatible('TouchableNativeFeedback')) {\n        return React.createElement(Ripple, {\n          elevation: raised ? [2, 4] : null,\n          rippleColor: rippleColor,\n          onPress: !disabled ? onPress : null,\n          onLongPress: !disabled ? onLongPress : null,\n          style: [styles.button, buttonStyle, {\n            backgroundColor: buttonStyle && buttonStyle.backgroundColor\n          }, raised && !isCompatible('elevation') && Platform.OS !== 'ios' && {\n            borderWidth: 1,\n            borderColor: 'rgba(0,0,0,.12)'\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 17\n          }\n        }, React.createElement(Text, {\n          style: [TYPO.paperFontButton, textStyle, styles.text],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }\n        }, text || value));\n      }\n\n      return React.createElement(TouchableNativeFeedback, {\n        background: TouchableNativeFeedback.Ripple(rippleColor),\n        onPress: !disabled ? onPress : null,\n        onLongPress: !disabled ? onLongPress : null,\n        onPressIn: raised ? this.setElevation : null,\n        onPressOut: raised ? this.removeElevation : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: [styles.button, buttonStyle, {\n          backgroundColor: buttonStyle && buttonStyle.backgroundColor,\n          elevation: raised ? elevation : 0\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [TYPO.paperFontButton, textStyle, styles.text],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }\n      }, text || value)));\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  overrides: PropTypes.shape({\n    textColor: PropTypes.string,\n    backgroundColor: PropTypes.string,\n    rippleColor: PropTypes.string\n  }),\n  disabled: PropTypes.bool,\n  raised: PropTypes.bool,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func\n};\nButton.defaultProps = {\n  theme: 'light',\n  primary: PRIMARY,\n  disabled: false,\n  raised: false\n};\nexport { Button as default };\nvar styles = {\n  button: {\n    height: 36,\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 16,\n    margin: 6,\n    borderRadius: 2\n  },\n  text: {\n    position: 'relative',\n    top: Platform.OS === 'android' ? 2 : -4\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Button.js"],"names":["React","Component","PropTypes","Ripple","TYPO","PRIMARY","THEME_NAME","PRIMARY_COLORS","getColor","isCompatible","Button","props","setElevation","setState","elevation","removeElevation","state","text","value","theme","primary","overrides","disabled","raised","onPress","onLongPress","textStyleMap","flat","light","normal","color","dark","buttonStyleMap","backgroundColor","borderColor","borderWidth","rippleColorMap","type","shape","textStyle","textColor","buttonStyle","rippleColor","styles","button","paperFontButton","Platform","OS","TouchableNativeFeedback","propTypes","string","isRequired","oneOf","bool","func","defaultProps","height","alignItems","justifyContent","paddingVertical","paddingHorizontal","margin","borderRadius","position","top"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View, Text, TouchableNativeFeedback, Platform} from \"react-native\";\nimport Ripple from './polyfill/Ripple';\nimport { TYPO, PRIMARY, THEME_NAME, PRIMARY_COLORS } from './config';\nimport { getColor, isCompatible } from './helpers';\n\nexport default class Button extends Component {\n\n    static propTypes = {\n        text: PropTypes.string.isRequired,\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        overrides: PropTypes.shape({\n            textColor: PropTypes.string,\n            backgroundColor: PropTypes.string,\n            rippleColor: PropTypes.string\n        }),\n        disabled: PropTypes.bool,\n        raised: PropTypes.bool,\n        onPress: PropTypes.func,\n        onLongPress: PropTypes.func,\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: PRIMARY,\n        disabled: false,\n        raised: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            elevation: 2\n        };\n    }\n\n    setElevation = () => {\n        this.setState({\n            elevation: 4\n        });\n    };\n\n    removeElevation = () => {\n        this.setState({\n            elevation: 2\n        });\n    };\n\n    render() {\n        const { elevation } = this.state;\n        const { text, value, theme, primary, overrides, disabled, raised, onPress, onLongPress } = this.props;\n\n        const textStyleMap = {\n            flat: {\n                light: {\n                    normal: {\n                        color: getColor(primary)\n                    },\n                    disabled: {\n                        color: 'rgba(0,0,0,.26)'\n                    }\n                },\n                dark: {\n                    normal: {\n                        color: getColor(primary)\n                    },\n                    disabled: {\n                        color: 'rgba(255,255,255,.3)'\n                    }\n                }\n            },\n            raised: {\n                light: {\n                    normal: {\n                        color: getColor(primary)\n                    },\n                    disabled: {\n                        color: 'rgba(0,0,0,.26)'\n                    }\n                },\n                dark: {\n                    normal: {\n                        color: '#fff'\n                    },\n                    disabled: {\n                        color: 'rgba(255,255,255,.3)'\n                    }\n                }\n            }\n        };\n\n        const buttonStyleMap = {\n            raised: {\n                light: {\n                    normal: {\n                        backgroundColor: '#fff',\n                        borderColor: 'rgba(0,0,0,.12)',\n                    },\n                    disabled: {\n                        backgroundColor: 'rgba(0,0,0,.12)',\n                        borderWidth: 1,\n                        borderColor: 'rgba(0,0,0,.12)'\n                    }\n                },\n                dark: {\n                    normal: {\n                        backgroundColor: getColor(primary),\n                        borderWidth: 1,\n                        borderColor: 'rgba(0,0,0,.12)'\n                    },\n                    disabled: {\n                        backgroundColor: 'rgba(255,255,255,.12)',\n                        borderWidth: 1,\n                        borderColor: 'rgba(0,0,0,.12)'\n                    }\n                }\n            }\n        };\n\n        const rippleColorMap = {\n            flat: {\n                light: {\n                    normal: 'rgba(153,153,153,.4)',\n                    disabled: 'rgba(0,0,0,0.06)'\n                },\n                dark: {\n                    normal: 'rgba(204,204,204,.25)',\n                    disabled: 'rgba(255,255,255,0.06)'\n                }\n            },\n            raised: {\n                light: {\n                    normal: 'rgba(153,153,153,.4)',\n                    disabled: 'rgba(0,0,0,.06)'\n                },\n                dark: {\n                    normal: getColor(`${primary}700`),\n                    disabled: 'rgba(255,255,255,.06)'\n                }\n            }\n        };\n\n        const type = disabled ? 'disabled' : 'normal';\n        const shape = raised ? 'raised' : 'flat';\n\n        const textStyle = (() => {\n            if (disabled || !(overrides && overrides.textColor)) {\n                return textStyleMap[shape][theme][type];\n            }\n\n            return { color: getColor(overrides.textColor) };\n        })();\n\n        const buttonStyle = (() => {\n            if (raised) {\n                if (disabled || !(overrides && overrides.backgroundColor)) {\n                    return buttonStyleMap[shape][theme][type];\n                }\n\n                return Object.assign(buttonStyleMap[shape][theme][type], { backgroundColor: getColor(overrides.backgroundColor) });\n            }\n\n            return null;\n        })();\n\n        const rippleColor = (() => {\n            if (disabled || !(overrides && overrides.rippleColor)) {\n                return rippleColorMap[shape][theme][type];\n            }\n\n            return getColor(overrides.rippleColor)\n        })();\n\n        if (disabled) {\n            return (\n                <View\n                    style={[\n                        styles.button,\n                        buttonStyle, {\n                            backgroundColor: buttonStyle && buttonStyle.backgroundColor\n                        }\n                    ]}\n                >\n                    <Text style={[TYPO.paperFontButton, textStyle, styles.text]}>\n                        {text || value}\n                    </Text>\n                </View>\n            );\n        }\n\n        if (!isCompatible('TouchableNativeFeedback')) {\n            return (\n                <Ripple\n                    elevation={raised ? [2, 4] : null}\n                    rippleColor={rippleColor}\n                    onPress={!disabled ? onPress : null}\n                    onLongPress={!disabled ? onLongPress : null}\n                    style={[\n                        styles.button,\n                        buttonStyle, {\n                            backgroundColor: buttonStyle && buttonStyle.backgroundColor,\n                        }, raised && !isCompatible('elevation') && Platform.OS !== 'ios' && {\n                            borderWidth: 1,\n                            borderColor: 'rgba(0,0,0,.12)'\n                        }\n                    ]}\n                >\n                    <Text style={[TYPO.paperFontButton, textStyle, styles.text]}>\n                        {text || value}\n                    </Text>\n                </Ripple>\n            )\n        }\n\n        return (\n            <TouchableNativeFeedback\n                background={TouchableNativeFeedback.Ripple(rippleColor)}\n                onPress={!disabled ? onPress : null}\n                onLongPress={!disabled ? onLongPress : null}\n                onPressIn={raised ? this.setElevation : null}\n                onPressOut={raised ? this.removeElevation : null}\n            >\n                <View style={[\n                    styles.button,\n                    buttonStyle, {\n                        backgroundColor: buttonStyle && buttonStyle.backgroundColor,\n                        elevation: raised ? elevation : 0\n                    }]}\n                >\n                    <Text style={[TYPO.paperFontButton, textStyle, styles.text]}>\n                        {text || value}\n                    </Text>\n                </View>\n            </TouchableNativeFeedback>\n        );\n    };\n}\n\nconst styles = {\n    button: {\n        height: 36,\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingVertical: 6,\n        paddingHorizontal: 16,\n        margin: 6,\n        borderRadius: 2\n    },\n    text: {\n        position: 'relative',\n        top: Platform.OS === 'android' ? 2 : -4\n    }\n};\n"]},"metadata":{},"sourceType":"module"}