{"ast":null,"code":";\n\n(function (root, factory, undef) {\n  if (typeof exports === \"object\") {\n    module.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n  } else if (typeof define === \"function\" && define.amd) {\n    define([\"./core\", \"./cipher-core\"], factory);\n  } else {\n    factory(root.CryptoJS);\n  }\n})(this, function (CryptoJS) {\n  CryptoJS.mode.CTR = function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n    var Encryptor = CTR.Encryptor = CTR.extend({\n      processBlock: function processBlock(words, offset) {\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize;\n        var iv = this._iv;\n        var counter = this._counter;\n\n        if (iv) {\n          counter = this._counter = iv.slice(0);\n          this._iv = undefined;\n        }\n\n        var keystream = counter.slice(0);\n        cipher.encryptBlock(keystream, 0);\n        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;\n\n        for (var i = 0; i < blockSize; i++) {\n          words[offset + i] ^= keystream[i];\n        }\n      }\n    });\n    CTR.Decryptor = Encryptor;\n    return CTR;\n  }();\n\n  return CryptoJS.mode.CTR;\n});","map":{"version":3,"sources":["/home/hambolu/Desktop/shop/node_modules/react-native-woocommerce-api/node_modules/crypto-js/mode-ctr.js"],"names":["root","factory","undef","exports","module","require","define","amd","CryptoJS","mode","CTR","lib","BlockCipherMode","extend","Encryptor","processBlock","words","offset","cipher","_cipher","blockSize","iv","_iv","counter","_counter","slice","undefined","keystream","encryptBlock","i","Decryptor"],"mappings":"AAAA;;AAAE,WAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgC;AACjC,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAEhCC,IAAAA,MAAM,CAACD,OAAP,GAAiBA,OAAO,GAAGF,OAAO,CAACI,OAAO,UAAR,EAAoBA,OAAO,iBAA3B,CAAlC;AACA,GAHD,MAIK,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AAEpDD,IAAAA,MAAM,CAAC,CAAC,QAAD,EAAW,eAAX,CAAD,EAA8BL,OAA9B,CAAN;AACA,GAHI,MAIA;AAEJA,IAAAA,OAAO,CAACD,IAAI,CAACQ,QAAN,CAAP;AACA;AACD,CAbC,EAaA,IAbA,EAaM,UAAUA,QAAV,EAAoB;AAK3BA,EAAAA,QAAQ,CAACC,IAAT,CAAcC,GAAd,GAAqB,YAAY;AAC7B,QAAIA,GAAG,GAAGF,QAAQ,CAACG,GAAT,CAAaC,eAAb,CAA6BC,MAA7B,EAAV;AAEA,QAAIC,SAAS,GAAGJ,GAAG,CAACI,SAAJ,GAAgBJ,GAAG,CAACG,MAAJ,CAAW;AACvCE,MAAAA,YAAY,EAAE,sBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AAEnC,YAAIC,MAAM,GAAG,KAAKC,OAAlB;AACA,YAAIC,SAAS,GAAGF,MAAM,CAACE,SAAvB;AACA,YAAIC,EAAE,GAAG,KAAKC,GAAd;AACA,YAAIC,OAAO,GAAG,KAAKC,QAAnB;;AAGA,YAAIH,EAAJ,EAAQ;AACJE,UAAAA,OAAO,GAAG,KAAKC,QAAL,GAAgBH,EAAE,CAACI,KAAH,CAAS,CAAT,CAA1B;AAGA,eAAKH,GAAL,GAAWI,SAAX;AACH;;AACD,YAAIC,SAAS,GAAGJ,OAAO,CAACE,KAAR,CAAc,CAAd,CAAhB;AACAP,QAAAA,MAAM,CAACU,YAAP,CAAoBD,SAApB,EAA+B,CAA/B;AAGAJ,QAAAA,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAA0BG,OAAO,CAACH,SAAS,GAAG,CAAb,CAAP,GAAyB,CAA1B,GAA+B,CAAxD;;AAGA,aAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAChCb,UAAAA,KAAK,CAACC,MAAM,GAAGY,CAAV,CAAL,IAAqBF,SAAS,CAACE,CAAD,CAA9B;AACH;AACJ;AAzBsC,KAAX,CAAhC;AA4BAnB,IAAAA,GAAG,CAACoB,SAAJ,GAAgBhB,SAAhB;AAEA,WAAOJ,GAAP;AACH,GAlCoB,EAArB;;AAqCA,SAAOF,QAAQ,CAACC,IAAT,CAAcC,GAArB;AAEA,CAzDC,CAAD","sourcesContent":[";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));"]},"metadata":{},"sourceType":"script"}