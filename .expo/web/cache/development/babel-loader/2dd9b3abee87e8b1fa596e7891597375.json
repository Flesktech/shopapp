{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/CheckboxGroup.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport { THEME_NAME, PRIMARY, PRIMARY_COLORS } from \"./config\";\n\nvar CheckboxGroup = function (_Component) {\n  _inherits(CheckboxGroup, _Component);\n\n  var _super = _createSuper(CheckboxGroup);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    _this = _super.call(this, props);\n\n    _this.componentWillMount = function () {\n      var checked = _this.props.checked;\n\n      if (checked && checked.length) {\n        _this.value = checked;\n      }\n    };\n\n    _this._onChange = function (checked, value) {\n      var selected = _this.state.selected;\n      var newSelected;\n\n      if (checked) {\n        newSelected = [].concat(_toConsumableArray(selected), [value]);\n      } else {\n        var index = selected.indexOf(value);\n        newSelected = [].concat(_toConsumableArray(selected.slice(0, index)), _toConsumableArray(selected.slice(index + 1)));\n      }\n\n      _this.setState({\n        selected: newSelected\n      });\n\n      var onSelect = _this.props.onSelect;\n      onSelect && onSelect(newSelected);\n    };\n\n    _this.state = {\n      selected: []\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          items = _this$props.items,\n          theme = _this$props.theme,\n          primary = _this$props.primary;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, items && items.length && items.map(function (item) {\n        var value = item.value;\n        return React.createElement(Checkbox, _extends({\n          ref: value,\n          key: \"Checkbox\" + value,\n          value: value,\n          theme: theme,\n          primary: primary,\n          onCheck: _this2._onChange,\n          checked: _this2.state.selected && _this2.state.selected.indexOf(value) !== -1\n        }, item, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }\n        }));\n      }));\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.state.selected;\n    },\n    set: function set(value) {\n      this.setState({\n        selected: value\n      });\n      var onSelect = this.props.onSelect;\n      onSelect && onSelect(value);\n    }\n  }]);\n\n  return CheckboxGroup;\n}(Component);\n\nCheckboxGroup.propTypes = {\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  onSelect: PropTypes.func,\n  checked: PropTypes.array,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    label: PropTypes.string,\n    disabled: PropTypes.bool\n  }))\n};\nCheckboxGroup.defaultProps = {\n  theme: 'light',\n  primary: PRIMARY\n};\nexport { CheckboxGroup as default };","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/CheckboxGroup.js"],"names":["React","Component","PropTypes","Checkbox","THEME_NAME","PRIMARY","PRIMARY_COLORS","CheckboxGroup","props","componentWillMount","checked","length","value","_onChange","selected","state","newSelected","index","indexOf","slice","setState","onSelect","items","theme","primary","map","item","propTypes","oneOf","func","array","arrayOf","shape","oneOfType","string","number","isRequired","label","disabled","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View} from \"react-native\";\nimport Checkbox from './Checkbox';\nimport { THEME_NAME, PRIMARY, PRIMARY_COLORS } from './config';\n\nexport default class CheckboxGroup extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: []\n        };\n    }\n\n    static propTypes = {\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        onSelect: PropTypes.func,\n        checked: PropTypes.array,\n        items: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            label: PropTypes.string,\n            disabled: PropTypes.bool\n        }))\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: PRIMARY\n    };\n\n    componentWillMount = () => {\n        const { checked } = this.props;\n\n        if (checked && checked.length) {\n            this.value = checked;\n        }\n    };\n\n    render() {\n        const { items, theme, primary } = this.props;\n        return (\n            <View>\n                {\n                    items && items.length && items.map((item) => {\n                        const { value } = item;\n                        return (\n                            <Checkbox\n                                ref={value}\n                                key={`Checkbox${value}`}\n                                value={value}\n                                theme={theme}\n                                primary={primary}\n                                onCheck={this._onChange}\n                                checked={this.state.selected && this.state.selected.indexOf(value) !== -1}\n                                {...item}\n                            />\n                        );\n                    })\n                }\n            </View>\n        );\n    };\n\n    _onChange = (checked, value) => {\n        const { selected } = this.state;\n\n        var newSelected;\n        if (checked) {\n            newSelected = [...selected, value]\n        } else {\n            let index = selected.indexOf(value);\n            newSelected = [\n                ...selected.slice(0, index),\n                ...selected.slice(index + 1)\n            ]\n        }\n\n        this.setState({\n            selected: newSelected\n        });\n\n        const { onSelect } = this.props;\n        onSelect && onSelect(newSelected);\n    };\n\n    /**\n     * Get the value of checked Checkbox in CheckboxGroup. Often use in form.\n     * @returns {Array}\n     */\n    get value() {\n        return this.state.selected\n    }\n\n    /**\n     * Make CheckboxGroup set some checkbox checked\n     * @param {string[]} value - An array of values of some Checkbox in　CheckboxGroup\n     */\n    set value(value) {\n        this.setState({\n            selected: value\n        });\n\n        const { onSelect } = this.props;\n        onSelect && onSelect(value);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}