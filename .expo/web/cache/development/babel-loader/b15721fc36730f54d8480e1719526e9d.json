{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Toolbar.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { TYPO, PRIMARY, THEME_NAME, PRIMARY_COLORS } from \"./config\";\nimport { getColor } from \"./helpers\";\nimport Icon from \"./Icon\";\nimport IconToggle from \"./IconToggle\";\n\nvar Toolbar = function (_Component) {\n  _inherits(Toolbar, _Component);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    _classCallCheck(this, Toolbar);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          theme = _this$props.theme,\n          primary = _this$props.primary,\n          style = _this$props.style,\n          leftIconStyle = _this$props.leftIconStyle,\n          rightIconStyle = _this$props.rightIconStyle,\n          elevation = _this$props.elevation,\n          overrides = _this$props.overrides,\n          icon = _this$props.icon,\n          onIconPress = _this$props.onIconPress,\n          actions = _this$props.actions;\n      var themeMap = {\n        light: {\n          backgroundColor: '#ffffff',\n          color: 'rgba(0,0,0,.87)',\n          leftIconColor: 'rgba(0,0,0,.54)',\n          rightIconColor: 'rgba(0,0,0,.54)'\n        },\n        dark: {\n          backgroundColor: getColor(primary),\n          color: 'rgba(255,255,255,.87)',\n          leftIconColor: 'rgba(255,255,255,.87)',\n          rightIconColor: 'rgba(255,255,255,.87)'\n        }\n      };\n      var opacityMap = {\n        light: .38,\n        dark: .30\n      };\n      var styleMap = {\n        backgroundColor: overrides && overrides.backgroundColor ? getColor(overrides.backgroundColor) : themeMap[theme].backgroundColor,\n        color: overrides && overrides.color ? getColor(overrides.color) : themeMap[theme].color,\n        leftIconColor: overrides && overrides.leftIconColor ? getColor(overrides.leftIconColor) : themeMap[theme].leftIconColor,\n        rightIconColor: overrides && overrides.rightIconColor ? getColor(overrides.rightIconColor) : themeMap[theme].rightIconColor\n      };\n      return React.createElement(View, {\n        style: [styles.toolbar, {\n          backgroundColor: styleMap.backgroundColor,\n          elevation: elevation\n        }, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, icon && React.createElement(IconToggle, {\n        color: styleMap.leftIconColor,\n        onPress: onIconPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, React.createElement(Icon, {\n        name: icon || 'menu',\n        size: 24,\n        color: styleMap.leftIconColor,\n        style: [styles.leftIcon, leftIconStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }\n      })), !title ? this.props.children : React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, TYPO.paperFontTitle, {\n          color: styleMap.color,\n          marginLeft: icon ? styles.title.marginLeft : 16\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, title), actions && actions.map(function (action, i) {\n        return React.createElement(IconToggle, {\n          key: i,\n          color: styleMap.rightIconColor,\n          badge: action.badge,\n          onPress: action.onPress,\n          disabled: action.disabled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 29\n          }\n        }, React.createElement(Icon, {\n          name: action.icon,\n          size: 24,\n          color: styleMap.rightIconColor,\n          style: [styles.rightIcon, rightIconStyle, action.disabled ? {\n            opacity: opacityMap[theme]\n          } : null],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }\n        }));\n      }));\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nToolbar.propTypes = {\n  title: PropTypes.string,\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  style: View.propTypes.style,\n  leftIconStyle: PropTypes.object,\n  rightIconStyle: PropTypes.object,\n  elevation: PropTypes.number,\n  overrides: PropTypes.shape({\n    backgroundColor: PropTypes.string,\n    titleColor: PropTypes.string,\n    leftIconColor: PropTypes.string,\n    rightIconColor: PropTypes.string\n  }),\n  icon: PropTypes.string,\n  onIconPress: PropTypes.func,\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    icon: PropTypes.string.isRequired,\n    onPress: PropTypes.func,\n    counter: PropTypes.shape()\n  }))\n};\nToolbar.defaultProps = {\n  theme: 'dark',\n  primary: PRIMARY,\n  elevation: 4\n};\nexport { Toolbar as default };\nvar styles = {\n  toolbar: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    height: 56,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  title: {\n    flex: 1,\n    marginLeft: 16\n  },\n  leftIcon: {\n    margin: 16\n  },\n  rightIcon: {\n    margin: 16\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Toolbar.js"],"names":["React","Component","PropTypes","TYPO","PRIMARY","THEME_NAME","PRIMARY_COLORS","getColor","Icon","IconToggle","Toolbar","props","title","theme","primary","style","leftIconStyle","rightIconStyle","elevation","overrides","icon","onIconPress","actions","themeMap","light","backgroundColor","color","leftIconColor","rightIconColor","dark","opacityMap","styleMap","styles","toolbar","leftIcon","children","paperFontTitle","marginLeft","map","action","i","badge","onPress","disabled","rightIcon","opacity","propTypes","string","oneOf","View","object","number","shape","titleColor","func","arrayOf","isRequired","counter","defaultProps","position","top","left","right","height","flexDirection","alignItems","flex","margin"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View, Text} from \"react-native\";\nimport { TYPO, PRIMARY, THEME_NAME, PRIMARY_COLORS } from './config';\nimport { getColor } from './helpers';\nimport Icon from './Icon';\nimport IconToggle from './IconToggle';\n\nexport default class Toolbar extends Component {\n\n    static propTypes = {\n        title: PropTypes.string,\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        style: View.propTypes.style,\n        leftIconStyle: PropTypes.object,\n        rightIconStyle: PropTypes.object,\n        elevation: PropTypes.number,\n        overrides: PropTypes.shape({\n            backgroundColor: PropTypes.string,\n            titleColor: PropTypes.string,\n            leftIconColor: PropTypes.string,\n            rightIconColor: PropTypes.string\n        }),\n        icon: PropTypes.string,\n        onIconPress: PropTypes.func,\n        actions: PropTypes.arrayOf(PropTypes.shape({\n            icon: PropTypes.string.isRequired,\n            onPress: PropTypes.func,\n            counter: PropTypes.shape()\n        }))\n    };\n\n    static defaultProps = {\n        theme: 'dark',\n        primary: PRIMARY,\n        elevation: 4\n    };\n\n    render() {\n        const { title, theme, primary, style, leftIconStyle, rightIconStyle, elevation, overrides, icon, onIconPress, actions } = this.props;\n\n        const themeMap = {\n            light: {\n                backgroundColor: '#ffffff',\n                color: 'rgba(0,0,0,.87)',\n                leftIconColor: 'rgba(0,0,0,.54)',\n                rightIconColor: 'rgba(0,0,0,.54)'\n            },\n            dark: {\n                backgroundColor: getColor(primary),\n                color: 'rgba(255,255,255,.87)',\n                leftIconColor: 'rgba(255,255,255,.87)',\n                rightIconColor: 'rgba(255,255,255,.87)'\n            }\n        };\n\n        const opacityMap = {\n            light: .38,\n            dark: .30\n        };\n\n        const styleMap = {\n            backgroundColor: overrides && overrides.backgroundColor ? getColor(overrides.backgroundColor) : themeMap[theme].backgroundColor,\n            color: overrides && overrides.color ? getColor(overrides.color) : themeMap[theme].color,\n            leftIconColor: overrides && overrides.leftIconColor ? getColor(overrides.leftIconColor) : themeMap[theme].leftIconColor,\n            rightIconColor: overrides && overrides.rightIconColor ? getColor(overrides.rightIconColor) : themeMap[theme].rightIconColor\n        };\n\n        return (\n            <View style={[styles.toolbar, { backgroundColor :styleMap.backgroundColor, elevation }, style]}>\n                {\n                    icon && (\n                        <IconToggle\n                            color={styleMap.leftIconColor}\n                            onPress={onIconPress}\n                        >\n                            <Icon name={icon || 'menu'}\n                                  size={24}\n                                  color={styleMap.leftIconColor}\n                                  style={[styles.leftIcon, leftIconStyle]}\n                            />\n                        </IconToggle>\n                    )\n                }\n                {\n                    !title ? this.props.children : (\n                        <Text\n                            numberOfLines={1}\n                            style={[styles.title, TYPO.paperFontTitle, {\n                                color: styleMap.color,\n                                marginLeft: icon ? styles.title.marginLeft : 16\n                            }]}\n                        >\n                            {title}\n                        </Text>\n                    )\n                }\n                {\n                    actions &&\n                    actions.map(function (action, i) {\n                        return (\n                            <IconToggle\n                                key={i}\n                                color={styleMap.rightIconColor}\n                                badge={action.badge}\n                                onPress={action.onPress}\n                                disabled={action.disabled}\n                            >\n                                <Icon name={action.icon}\n                                      size={24}\n                                      color={styleMap.rightIconColor}\n                                      style={[styles.rightIcon, rightIconStyle, action.disabled ? { opacity: opacityMap[theme] } : null]}\n                                />\n                            </IconToggle>\n                        );\n                    })\n                }\n            </View>\n        );\n    }\n}\n\nconst styles = {\n    toolbar: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        height: 56,\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    title: {\n        flex: 1,\n        marginLeft: 16\n    },\n    leftIcon: {\n        margin: 16\n    },\n    rightIcon: {\n        margin: 16\n    }\n};\n"]},"metadata":{},"sourceType":"module"}