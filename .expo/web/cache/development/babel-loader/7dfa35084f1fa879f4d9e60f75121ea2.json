{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Checkbox.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { TYPO, PRIMARY, COLOR, PRIMARY_COLORS, THEME_NAME } from \"./config\";\nimport Icon from \"./Icon\";\nimport IconToggle from \"./IconToggle\";\nvar typos = StyleSheet.create(TYPO);\n\nvar Checkbox = function (_Component) {\n  _inherits(Checkbox, _Component);\n\n  var _super = _createSuper(Checkbox);\n\n  function Checkbox() {\n    _classCallCheck(this, Checkbox);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Checkbox, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          primary = _this$props.primary,\n          checked = _this$props.checked,\n          disabled = _this$props.disabled,\n          value = _this$props.value,\n          onCheck = _this$props.onCheck;\n\n      var status = function () {\n        if (disabled) {\n          return 'disabled';\n        } else if (checked) {\n          return 'checked';\n        } else {\n          return 'default';\n        }\n      }();\n\n      var colorMap = {\n        light: {\n          disabled: '#000000',\n          checked: COLOR[primary + \"500\"].color,\n          default: '#000000'\n        },\n        dark: {\n          disabled: '#ffffff',\n          checked: COLOR[primary + \"500\"].color,\n          default: '#ffffff'\n        }\n      };\n      var opacityMap = {\n        light: {\n          checked: 1,\n          default: 0.54,\n          disabled: 0.26\n        },\n        dark: {\n          checked: 1,\n          default: 0.7,\n          disabled: 0.3\n        }\n      };\n      var underlayMap = {\n        light: 'rgba(0,0,0,.12)',\n        dark: 'rgba(255,255,255,.12)'\n      };\n      var labelColorMap = {\n        light: '#000000',\n        dark: '#ffffff'\n      };\n      var CURR_COLOR = colorMap[theme][status];\n      var OPACITY = opacityMap[theme][status];\n      var LABEL_COLOR = labelColorMap[theme];\n      var UNDERLAY_COLOR = underlayMap[theme];\n      return React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          disabled ? null : onCheck(!checked, value);\n        },\n        underlayColor: disabled ? 'rgba(0,0,0,0)' : UNDERLAY_COLOR,\n        activeOpacity: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, React.createElement(IconToggle, {\n        disabled: disabled,\n        color: CURR_COLOR,\n        onPress: function onPress() {\n          disabled ? null : onCheck(!checked, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, React.createElement(Icon, {\n        name: checked ? 'check-box' : 'check-box-outline-blank',\n        size: 24,\n        color: CURR_COLOR,\n        key: value,\n        style: {\n          opacity: OPACITY,\n          margin: 16\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      })), React.createElement(View, {\n        style: styles.labelContainer,\n        onPress: function onPress() {\n          return onCheck(!checked, value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: [typos.paperFontBody1, styles.label, COLOR[theme + \"PrimaryOpacity\"], disabled && COLOR[theme + \"DisabledOpacity\"], {\n          color: LABEL_COLOR\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }\n      }, this.props.label))));\n    }\n  }]);\n\n  return Checkbox;\n}(Component);\n\nCheckbox.propTypes = {\n  label: PropTypes.string,\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onCheck: PropTypes.func\n};\nCheckbox.defaultProps = {\n  theme: 'light',\n  primary: PRIMARY,\n  disabled: false\n};\nexport { Checkbox as default };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0)'\n  },\n  label: {\n    marginLeft: 16,\n    opacity: COLOR.darkPrimaryOpacity.opacity,\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Checkbox.js"],"names":["React","Component","PropTypes","TYPO","PRIMARY","COLOR","PRIMARY_COLORS","THEME_NAME","Icon","IconToggle","typos","StyleSheet","create","Checkbox","props","theme","primary","checked","disabled","value","onCheck","status","colorMap","light","color","default","dark","opacityMap","underlayMap","labelColorMap","CURR_COLOR","OPACITY","LABEL_COLOR","UNDERLAY_COLOR","styles","container","opacity","margin","labelContainer","paperFontBody1","label","propTypes","string","oneOf","oneOfType","number","isRequired","bool","func","defaultProps","flexDirection","alignItems","backgroundColor","marginLeft","darkPrimaryOpacity","flex"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {StyleSheet, Text, View, TouchableHighlight} from \"react-native\";\nimport { TYPO, PRIMARY, COLOR, PRIMARY_COLORS, THEME_NAME } from './config';\nimport Icon from './Icon';\nimport IconToggle from './IconToggle';\n\nconst typos = StyleSheet.create(TYPO);\n\nexport default class Checkbox extends Component {\n\n    static propTypes = {\n        label: PropTypes.string,\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n        checked: PropTypes.bool,\n        disabled: PropTypes.bool,\n        onCheck: PropTypes.func\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: PRIMARY,\n        disabled: false\n    };\n\n    render() {\n        const { theme, primary, checked, disabled, value, onCheck } = this.props;\n\n        const status = (()=> {\n            if (disabled) {\n                return 'disabled'\n            } else if (checked) {\n                return 'checked'\n            } else {\n                return 'default'\n            }\n        })();\n\n        const colorMap = {\n            light: {\n                disabled: '#000000',\n                checked: COLOR[`${primary}500`].color,\n                default: '#000000'\n            },\n            dark: {\n                disabled: '#ffffff',\n                checked: COLOR[`${primary}500`].color,\n                default: '#ffffff'\n            }\n        };\n\n        const opacityMap = {\n            light: {\n                checked: 1,\n                default: 0.54,\n                disabled: 0.26\n            },\n            dark: {\n                checked: 1,\n                default: 0.7,\n                disabled: 0.3\n            }\n        };\n\n        const underlayMap = {\n            light: 'rgba(0,0,0,.12)',\n            dark: 'rgba(255,255,255,.12)'\n        }\n\n        const labelColorMap = {\n            light: '#000000',\n            dark: '#ffffff'\n        };\n\n        const CURR_COLOR = colorMap[theme][status];\n        const OPACITY = opacityMap[theme][status];\n        const LABEL_COLOR = labelColorMap[theme];\n        const UNDERLAY_COLOR = underlayMap[theme];\n\n        return (\n            <TouchableHighlight\n                onPress={() => { disabled ? null : onCheck(!checked, value) }}\n                underlayColor={disabled ? 'rgba(0,0,0,0)' : UNDERLAY_COLOR}\n                activeOpacity={1}\n            >\n                <View style={styles.container}>\n                    <IconToggle\n                        disabled={disabled}\n                        color={CURR_COLOR}\n                        onPress={() => { disabled ? null : onCheck(!checked, value) }}\n                    >\n                        <Icon name={checked ? 'check-box' : 'check-box-outline-blank'}\n                              size={24}\n                              color={CURR_COLOR}\n                              key={value}\n                              style={{\n                                  opacity: OPACITY,\n                                  margin: 16,\n                              }}\n                        />\n                    </IconToggle>\n                    <View\n                        style={styles.labelContainer}\n                        onPress={() => onCheck(!checked, value)}\n                    >\n                        <Text\n                            style={[\n                                typos.paperFontBody1,\n                                styles.label,\n                                COLOR[`${theme}PrimaryOpacity`],\n                                disabled && COLOR[`${theme}DisabledOpacity`], {\n                                    color: LABEL_COLOR\n                                }\n                            ]}\n                        >\n                            {this.props.label}\n                        </Text>\n                    </View>\n                </View>\n            </TouchableHighlight>\n        );\n    };\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: 'row',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0,0,0,0)'\n    },\n    label: {\n        marginLeft: 16,\n        opacity: COLOR.darkPrimaryOpacity.opacity,\n        flex: 1\n    }\n});"]},"metadata":{},"sourceType":"module"}