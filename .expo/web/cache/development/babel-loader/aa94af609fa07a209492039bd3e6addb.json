{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/IconToggle.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { getColor } from \"./helpers\";\n\nvar IconToggle = function (_Component) {\n  _inherits(IconToggle, _Component);\n\n  var _super = _createSuper(IconToggle);\n\n  function IconToggle(props) {\n    var _this;\n\n    _classCallCheck(this, IconToggle);\n\n    _this = _super.call(this, props);\n\n    _this.setSize = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n\n      _this.setState({\n        size: width > height ? width : height\n      });\n    };\n\n    _this._highlight = function () {\n      if (!_this.props.disabled) {\n        Animated.timing(_this.state.scaleValue, {\n          toValue: 1,\n          duration: 150\n        }).start();\n        Animated.timing(_this.state.opacityValue, {\n          toValue: _this.state.maxOpacity,\n          duration: 100\n        }).start();\n      }\n    };\n\n    _this._unHighlight = function () {\n      if (!_this.props.disabled) {\n        Animated.timing(_this.state.scaleValue, {\n          toValue: 0.01,\n          duration: 1500\n        }).start();\n        Animated.timing(_this.state.opacityValue, {\n          toValue: 0\n        }).start();\n      }\n    };\n\n    _this._animateBadgeCounter = function () {\n      if (_this.badgeAnim && _this.props.badge && _this.props.badge.animate !== false) {\n        Animated.spring(_this.badgeAnim, {\n          toValue: 0,\n          velocity: 8,\n          tension: -5,\n          friction: 1,\n          duration: 300\n        }).start();\n      }\n    };\n\n    _this._handleResponderEnd = function () {\n      var _this$props = _this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress;\n\n      if (!disabled) {\n        _this._unHighlight();\n\n        onPress && onPress();\n      }\n    };\n\n    _this.state = {\n      scaleValue: new Animated.Value(0.01),\n      opacityValue: new Animated.Value(0.1),\n      maxOpacity: props.opacity,\n      size: null\n    };\n    _this._responder = {\n      onStartShouldSetResponder: function onStartShouldSetResponder(e) {\n        return true;\n      },\n      onResponderGrant: _this._highlight,\n      onResponderRelease: _this._handleResponderEnd,\n      onResponderTerminate: _this._unHighlight\n    };\n    return _this;\n  }\n\n  _createClass(IconToggle, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props && this.props.badge) {\n        if (prevProps.badge && this.props.badge.value !== prevProps.badge.value) {\n          this._animateBadgeCounter();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          scaleValue = _this$state.scaleValue,\n          opacityValue = _this$state.opacityValue,\n          size = _this$state.size;\n      var _this$props2 = this.props,\n          color = _this$props2.color,\n          children = _this$props2.children;\n      var badge = this.props.badge;\n      var percent = this.props.percent;\n\n      if (percent < 0) {\n        percent = 0;\n      }\n\n      if (percent > 100) {\n        percent = 100;\n      }\n\n      percent = percent / 100;\n\n      if (badge && typeof badge.value === 'number') {\n        badge = _extends({}, {\n          value: badge.value\n        }, badge.backgroundColor ? {\n          backgroundColor: badge.backgroundColor\n        } : {\n          backgroundColor: 'paperRed'\n        }, badge.textColor ? {\n          textColor: badge.textColor\n        } : {\n          textColor: '#ffffff'\n        });\n      }\n\n      this.badgeAnim = this.badgeAnim || new Animated.Value(0);\n      return React.createElement(View, _extends({}, this._responder, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }, size && React.createElement(Animated.View, {\n        style: [{\n          position: 'absolute',\n          left: (1 - percent) * size / 2,\n          top: (1 - percent) * size / 2,\n          width: percent * size,\n          height: percent * size,\n          borderRadius: percent * size / 2,\n          transform: [{\n            scale: scaleValue\n          }],\n          opacity: opacityValue,\n          backgroundColor: getColor(color)\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      }), React.createElement(View, {\n        style: {\n          backgroundColor: 'transparent'\n        },\n        onLayout: function onLayout(event) {\n          _this2.setSize(event);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, children), size && badge && typeof badge.value === 'number' && React.createElement(Animated.View, {\n        style: [styles.badgeContainer, {\n          backgroundColor: getColor(badge.backgroundColor),\n          top: size / 10,\n          right: size / 10,\n          transform: [{\n            scale: this.badgeAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 1.25]\n            })\n          }, {\n            translateX: this.badgeAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, -6]\n            })\n          }, {\n            translateY: this.badgeAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 5]\n            })\n          }, {\n            rotate: this.badgeAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '45deg']\n            })\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: [styles.badgeText, {\n          color: getColor(badge.textColor)\n        }, badge.value > 99 ? {\n          fontSize: 8\n        } : {\n          fontSize: 10\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 33\n        }\n      }, badge.value)))));\n    }\n  }]);\n\n  return IconToggle;\n}(Component);\n\nIconToggle.propTypes = {\n  color: PropTypes.string.isRequired,\n  opacity: PropTypes.number,\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func,\n  percent: PropTypes.number,\n  children: PropTypes.element.isRequired,\n  badge: PropTypes.shape({\n    value: PropTypes.number,\n    animate: PropTypes.bool,\n    backgroundColor: PropTypes.string,\n    textColor: PropTypes.string\n  })\n};\nIconToggle.defaultProps = {\n  opacity: .1,\n  disabled: false,\n  percent: 90\n};\nexport { IconToggle as default };\nvar styles = {\n  badgeContainer: {\n    position: 'absolute',\n    borderRadius: 7.5,\n    width: 15,\n    height: 15\n  },\n  badgeText: {\n    textAlign: 'center'\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/IconToggle.js"],"names":["React","Component","PropTypes","getColor","IconToggle","props","setSize","event","nativeEvent","layout","width","height","setState","size","_highlight","disabled","Animated","timing","state","scaleValue","toValue","duration","start","opacityValue","maxOpacity","_unHighlight","_animateBadgeCounter","badgeAnim","badge","animate","spring","velocity","tension","friction","_handleResponderEnd","onPress","Value","opacity","_responder","onStartShouldSetResponder","e","onResponderGrant","onResponderRelease","onResponderTerminate","prevProps","value","color","children","percent","backgroundColor","textColor","position","left","top","borderRadius","transform","scale","styles","badgeContainer","right","interpolate","inputRange","outputRange","translateX","translateY","rotate","flex","justifyContent","badgeText","fontSize","propTypes","string","isRequired","number","bool","func","element","shape","defaultProps","textAlign"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {Text, View, Animated} from \"react-native\";\nimport { getColor } from './helpers';\n\nexport default class IconToggle extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            scaleValue: new Animated.Value(0.01),\n            opacityValue: new Animated.Value(0.1),\n            maxOpacity: props.opacity,\n            size: null\n        };\n        this._responder = {\n            onStartShouldSetResponder: (e) => true,\n            onResponderGrant: this._highlight,\n            onResponderRelease: this._handleResponderEnd,\n            onResponderTerminate: this._unHighlight\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props && this.props.badge) {\n            if (prevProps.badge && this.props.badge.value !== prevProps.badge.value) {\n                this._animateBadgeCounter();\n            }\n        }\n    };\n\n    static propTypes = {\n        color: PropTypes.string.isRequired,\n        opacity: PropTypes.number,\n        disabled: PropTypes.bool,\n        onPress: PropTypes.func,\n        percent: PropTypes.number,\n        children: PropTypes.element.isRequired,\n        badge: PropTypes.shape({\n            value: PropTypes.number,\n            animate: PropTypes.bool,\n            backgroundColor: PropTypes.string,\n            textColor: PropTypes.string\n        })\n    };\n\n    static defaultProps = {\n        opacity: .1,\n        disabled: false,\n        percent: 90\n    };\n\n    setSize = (event) => {\n        const { width, height } = event.nativeEvent.layout;\n\n        this.setState({\n            size: width > height ? width : height\n        });\n    };\n\n    render() {\n        const { scaleValue, opacityValue, size } = this.state;\n        const { color, children } = this.props;\n\n        let { badge } = this.props;\n        let { percent } = this.props;\n\n        if (percent < 0) {\n            percent = 0;\n        }\n        if (percent > 100) {\n            percent = 100;\n        }\n\n        percent = percent / 100;\n\n        if (badge && typeof badge.value === 'number') {\n            badge = Object.assign({},\n                {value: badge.value},\n                badge.backgroundColor ? {backgroundColor: badge.backgroundColor} : {backgroundColor: 'paperRed'},\n                badge.textColor ? {textColor: badge.textColor} : {textColor: '#ffffff'}\n            );\n        }\n\n        this.badgeAnim = this.badgeAnim || new Animated.Value(0);\n\n        return (\n            <View {...this._responder}>\n                <View>\n                    {size &&\n                        <Animated.View\n                            style={[{\n                                position: 'absolute',\n                                left: ((1 - percent) * size) / 2,\n                                top: ((1 - percent) * size) / 2,\n                                width: percent * size,\n                                height: percent * size,\n                                borderRadius: percent * size / 2,\n                                transform: [{ scale: scaleValue }],\n                                opacity: opacityValue,\n                                backgroundColor: getColor(color)\n                            }]}\n                        />\n                    }\n                    <View style={{ backgroundColor: 'transparent' }} onLayout={(event) => { this.setSize(event) }}>\n                        {children}\n                    </View>\n                    {size && badge && typeof badge.value === 'number' &&\n                        <Animated.View style={[\n                            styles.badgeContainer, {\n                            backgroundColor: getColor(badge.backgroundColor),\n                            top: size / 10,\n                            right: size / 10,\n                            transform: [   // Array order matters\n                                {scale: this.badgeAnim.interpolate({\n                                  inputRange: [0, 1],\n                                  outputRange: [1, 1.25]\n                                })},\n                                {translateX: this.badgeAnim.interpolate({\n                                  inputRange: [0, 1],\n                                  outputRange: [0, -6]\n                                })},\n                                {translateY: this.badgeAnim.interpolate({\n                                  inputRange: [0, 1],\n                                  outputRange: [0, 5]\n                                })},\n                                {rotate: this.badgeAnim.interpolate({\n                                  inputRange: [0, 1],\n                                  outputRange: [\n                                    '0deg', '45deg' // 'deg' or 'rad'\n                                  ]\n                                })}\n                            ]}]}\n                        >\n                            <View style={{ flex: 1, justifyContent: 'center' }}>\n                                <Text style={[styles.badgeText, { color: getColor(badge.textColor) }, badge.value > 99 ? { fontSize: 8 } : { fontSize: 10 }]}>\n                                    {badge.value}\n                                </Text>\n                            </View>\n                        </Animated.View>\n                    }\n                </View>\n            </View>\n        );\n    };\n\n    /**\n     *\n     * @private\n     */\n    _highlight = () => {\n        if (!this.props.disabled) {\n            Animated.timing(this.state.scaleValue, {\n                toValue: 1,\n                duration: 150\n            }).start();\n            Animated.timing(this.state.opacityValue, {\n                toValue: this.state.maxOpacity,\n                duration: 100\n            }).start();\n        }\n    };\n\n\n    /**\n     *\n     * @private\n     */\n    _unHighlight = () => {\n        if (!this.props.disabled) {\n            Animated.timing(this.state.scaleValue, {\n                toValue: 0.01,\n                duration: 1500\n            }).start();\n            Animated.timing(this.state.opacityValue, {\n                toValue: 0\n            }).start();\n        }\n    };\n\n    /**\n     *\n     * @private\n     */\n    _animateBadgeCounter = () => {\n        if (this.badgeAnim && this.props.badge && this.props.badge.animate !== false) {\n            Animated.spring(this.badgeAnim, {\n                toValue: 0,   // Returns to the start\n                velocity: 8,  // Velocity makes it move\n                tension: -5, // Slow\n                friction: 1,  // Oscillate a lot\n                duration: 300\n            }).start();\n        }\n    };\n\n    /**\n     *\n     * @private\n     */\n    _handleResponderEnd = () => {\n        const { disabled, onPress } = this.props;\n\n        if (!disabled) {\n            this._unHighlight();\n            onPress && onPress();\n        }\n    };\n}\n\nconst styles = {\n    badgeContainer: {\n        position: 'absolute',\n        borderRadius: 7.5,\n        width: 15,\n        height: 15\n    },\n    badgeText: {\n        textAlign: 'center'\n    }\n};\n"]},"metadata":{},"sourceType":"module"}