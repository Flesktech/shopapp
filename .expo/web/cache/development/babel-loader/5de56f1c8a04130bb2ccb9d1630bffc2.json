{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/Divider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { THEME_NAME } from \"./config\";\n\nvar Divider = function (_Component) {\n  _inherits(Divider, _Component);\n\n  var _super = _createSuper(Divider);\n\n  function Divider() {\n    _classCallCheck(this, Divider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Divider, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          inset = _this$props.inset,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      return React.createElement(View, {\n        style: [styles.divider, inset && {\n          marginLeft: 72\n        }, {\n          backgroundColor: theme === 'light' ? 'rgba(0,0,0,.12)' : 'rgba(255,255,255,.12)'\n        }, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return Divider;\n}(Component);\n\nDivider.propTypes = {\n  inset: PropTypes.bool,\n  theme: PropTypes.oneOf(THEME_NAME),\n  style: View.propTypes.style\n};\nDivider.defaultProps = {\n  inset: false,\n  theme: 'light'\n};\nexport { Divider as default };\nvar styles = {\n  divider: {\n    height: 1\n  }\n};","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/Divider.js"],"names":["React","Component","PropTypes","THEME_NAME","Divider","props","inset","theme","style","styles","divider","marginLeft","backgroundColor","propTypes","bool","oneOf","View","defaultProps","height"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,SAA1B,QAA0C,OAA1C;;AAEA,SAASC,UAAT;;IAEqBC,O;;;;;;;;;;;;;6BAaR;AAAA,wBAC2B,KAAKC,KADhC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,KADV,eACUA,KADV;AAAA,UACiBC,KADjB,eACiBA,KADjB;AAGL,aACI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAE,CACHC,MAAM,CAACC,OADJ,EAEHJ,KAAK,IAAI;AAAEK,UAAAA,UAAU,EAAE;AAAd,SAFN,EAE0B;AACzBC,UAAAA,eAAe,EAAEL,KAAK,KAAK,OAAV,GAAoB,iBAApB,GAAwC;AADhC,SAF1B,EAKHC,KALG,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWH;;;;EA3BgCP,S;;AAAhBG,O,CAEVS,S,GAAY;AACfP,EAAAA,KAAK,EAAEJ,SAAS,CAACY,IADF;AAEfP,EAAAA,KAAK,EAAEL,SAAS,CAACa,KAAV,CAAgBZ,UAAhB,CAFQ;AAGfK,EAAAA,KAAK,EAAEQ,IAAI,CAACH,SAAL,CAAeL;AAHP,C;AAFFJ,O,CAQVa,Y,GAAe;AAClBX,EAAAA,KAAK,EAAE,KADW;AAElBC,EAAAA,KAAK,EAAE;AAFW,C;SARLH,O;AA8BrB,IAAMK,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE;AACLQ,IAAAA,MAAM,EAAE;AADH;AADE,CAAf","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View} from \"react-native\";\nimport { THEME_NAME } from './config';\n\nexport default class Divider extends Component {\n\n    static propTypes = {\n        inset: PropTypes.bool,\n        theme: PropTypes.oneOf(THEME_NAME),\n        style: View.propTypes.style\n    };\n\n    static defaultProps = {\n        inset: false,\n        theme: 'light'\n    };\n\n    render() {\n        const { inset, theme, style } = this.props;\n\n        return (\n            <View\n                style={[\n                    styles.divider,\n                    inset && { marginLeft: 72 }, {\n                        backgroundColor: theme === 'light' ? 'rgba(0,0,0,.12)' : 'rgba(255,255,255,.12)'\n                    },\n                    style\n                ]}\n            />\n        );\n    }\n}\n\nconst styles = {\n    divider: {\n        height: 1\n    }\n};"]},"metadata":{},"sourceType":"module"}