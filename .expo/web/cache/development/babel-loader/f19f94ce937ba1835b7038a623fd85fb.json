{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/hambolu/shop/node_modules/react-native-material-design/lib/RadioButtonGroup.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport RadioButton from \"./RadioButton\";\nimport { PRIMARY, PRIMARY_COLORS, THEME_NAME } from \"./config\";\n\nvar RadioButtonGroup = function (_Component) {\n  _inherits(RadioButtonGroup, _Component);\n\n  var _super = _createSuper(RadioButtonGroup);\n\n  function RadioButtonGroup(props) {\n    var _this;\n\n    _classCallCheck(this, RadioButtonGroup);\n\n    _this = _super.call(this, props);\n\n    _this.componentDidMount = function () {\n      var selected = _this.state.selected;\n\n      if (selected) {\n        _this.value = selected;\n      }\n    };\n\n    _this.onSelect = function (value) {\n      var onSelect = _this.props.onSelect;\n\n      _this.setState({\n        selected: value\n      });\n\n      onSelect && onSelect(value);\n    };\n\n    _this.state = {\n      selected: props.selected || null\n    };\n    return _this;\n  }\n\n  _createClass(RadioButtonGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          items = _this$props.items,\n          theme = _this$props.theme,\n          primary = _this$props.primary;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, items && items.length && items.map(function (item) {\n        var value = item.value;\n        return React.createElement(RadioButton, _extends({\n          ref: value,\n          key: \"RadioButton\" + value,\n          value: \"\" + value.toString(),\n          theme: theme,\n          primary: primary,\n          onSelect: _this2.onSelect,\n          checked: _this2.state.selected && _this2.state.selected === value\n        }, item, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }\n        }));\n      }));\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.state.selected;\n    },\n    set: function set(value) {\n      this.onSelect(value);\n    }\n  }]);\n\n  return RadioButtonGroup;\n}(Component);\n\nRadioButtonGroup.propTypes = {\n  theme: PropTypes.oneOf(THEME_NAME),\n  primary: PropTypes.oneOf(PRIMARY_COLORS),\n  onSelect: PropTypes.func,\n  selected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  items: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    label: PropTypes.string,\n    disabled: PropTypes.bool\n  }))\n};\nRadioButtonGroup.defaultProps = {\n  theme: 'light',\n  primary: PRIMARY\n};\nexport { RadioButtonGroup as default };","map":{"version":3,"sources":["/home/hambolu/shop/node_modules/react-native-material-design/lib/RadioButtonGroup.js"],"names":["React","Component","PropTypes","RadioButton","PRIMARY","PRIMARY_COLORS","THEME_NAME","RadioButtonGroup","props","componentDidMount","selected","state","value","onSelect","setState","items","theme","primary","length","map","item","toString","propTypes","oneOf","func","oneOfType","string","number","arrayOf","shape","isRequired","label","disabled","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component, PropTypes} from \"react\";\nimport {View} from \"react-native\";\nimport RadioButton from './RadioButton';\nimport { PRIMARY, PRIMARY_COLORS, THEME_NAME } from './config';\n\nexport default class RadioButtonGroup extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selected: props.selected || null\n        };\n    }\n\n    static propTypes = {\n        theme: PropTypes.oneOf(THEME_NAME),\n        primary: PropTypes.oneOf(PRIMARY_COLORS),\n        onSelect: PropTypes.func,\n        selected: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        items: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            label: PropTypes.string,\n            disabled: PropTypes.bool\n        }))\n    };\n\n    static defaultProps = {\n        theme: 'light',\n        primary: PRIMARY\n    };\n\n    componentDidMount = () => {\n        const { selected } = this.state;\n\n        if (selected) {\n            this.value = selected;\n        }\n    };\n\n    render() {\n        const { items, theme, primary } = this.props;\n        return (\n            <View>\n                {\n                    items && items.length && items.map((item) => {\n                        const { value } = item;\n                        return (\n                            <RadioButton\n                                ref={value}\n                                key={`RadioButton${value}`}\n                                value={`${value.toString()}`}\n                                theme={theme}\n                                primary={primary}\n                                onSelect={this.onSelect}\n                                checked={this.state.selected && this.state.selected === value}\n                                {...item}\n                            />\n                        );\n                    })\n                }\n            </View>\n        );\n    };\n\n    onSelect = (value) => {\n        const { onSelect } = this.props;\n\n        this.setState({\n            selected: value\n        });\n\n        onSelect && onSelect(value);\n    };\n\n    /**\n     * Get the value of checked RadioButton in RadioButtonGroup. Often use in form.\n     * @returns {string}\n     */\n    get value() {\n        return this.state.selected\n    }\n\n    /**\n     * Specifies that which RadioButton should be pre-selected\n     * @param {string} value\n     */\n    set value(value) {\n        this.onSelect(value);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}